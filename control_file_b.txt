!********************************************************************
!			CONTROL FILE
! Use '=' as a separator between the variable and its value
! String values begin right after '=' symbol, no quotes!
! Comments are marked with '!'
!********************************************************************
!********************************************************************
! General specifications:
!********************************************************************
cpts=m2	! m2k1s2o1 ! m2, k1, s2, o1, p1, n2, mf, k2, mm, q1 
		! Eight primary (M2, S2, N2, K2, K1, O1, P1, Q1), two long period (Mf,Mm)
graphics=0	! 0 -- no graphics; 1 -- plot the final sols; 2 -- convergence plots (matlab22 command)
messages=1	! 0 -- none, 1 -- detailed timings, 2 -- integrals every iteration, 3 -- solver stats (a lot)
		!
isave=1		! 1 -- save to /yyyy_mm_dd__HH_MM
		! 0 -- save to /0000_00_00__00_00
cleanup=1	! 0 - none, 1 - remove files in 'temp' dirs, 2 - remove ALL files in dir_mats
!****************************
! Previously generated grids
!****************************
! Grids in Mercator:
!gridid=2012_11_23__04_00! nph = 2880
! Grids in Lat-Lon:
!gridid=2013_06_09__22_47! nph = 5040
!gridid=! nph = 4320
!gridid=2013_06_05__20_34! nph = 3600 
!gridid=2013_06_01__16_10! nph = 2880
!gridid=2013_05_16__21_49! nph = 2160  
!gridid=2013_05_19__19_44! nph = 1440 
!************** use previously generated solution as initial guess *************************
load_sol=1		! 0 -- 0-init guess; 1 -- use the solution found at gridid_sol;
			! 2 -- load and use the tpxo solution
gridid_sol=2013_06_09__22_47	! directory where to look
!gridid_sol=2013_06_07__17_26
tpxo_dir=tpxo7.2		! TPXO directory (on top of Tides/data)
!********************************************************************
! Global grid:
!********************************************************************
nph=4320	! 1/10 degree: 3600 ! 1/12 degree: 4320 ! 1/14 degree: 5040 ! 1/15 degree: 5400
coor=2		! 1 for Mercator, 2 for lat-lon
load_etopo=0	! 1 -- load the original ETOPO/NOCS file
		! 0 -- use topo_file created earlier
etopo_res=10800	! number of lon grid points that etopo should be interpolated down to
		! 1min: 21600; 2min: 10800; 4min: 5400; 8min: 2700
!	flags.global.filter.bays=1;  % 0=keep; 1=remove
!	flags.global.filter.inlandseas=1; % 0=keep; 1=remove
!	flags.global.filter.masklim=0.4;  % set to ocean when this proportion is exceeded...
bays=1		! 0=keep; 1=remove
inlandseas=1	! 0=keep; 1=remove
hmin_scheme=2	! 1=simple min depth; 2=local critera
hmin=10		! option 1: a simple minimum depth
gppw=6		! option 2: min number of Grid Points Per Wavelength
!*********************************************************************************************
! Domain integrals:
!*********************************************************************************************
di_log=1	!  save calculated 
!************** report dissipation in (SHALLOW-DEEP) and (COASTAL-OPEN) ocean ****************
sh_depth = 1000 ! deeper than sh_depth meters is DEEP, the rest is SHALLOW ocean
coast_flag = 0	! 0 -- DO NOT do coast-op_ocean split in DI (slow); 1 -- calc coastal areas and integrals 
coast_dist = 3e5! closer to the coast than coast_dist is COASTAL, the rest is OPEN ocean
!********************************************************************
!  Bottom friction scheme:
!********************************************************************
fr_scheme=3	! % 0=none, 1=linear (cd, ubar), 2=linear (cd, Qbar)
		! % 3=quadratic (cd, Q); 4=local area models
cd=0.0025	! nondimensional drag coefficient
ubar=1		! option 1: average value for friction velocity
Qbar=100	! option 2: average value for transport Q
ndays = 0	! length of projection (in days) (optional, if =0 then calc_projection_period is used)
nppp = 0	! min number of points per period (optional, if =0 then default 8 is used)
!********************************************************************
! BAROTROPIC Internal tide drag scheme
!********************************************************************
itd_scheme=20		!% 0=none; 1=parameterized;
			!% 2=solve lin int tide eqs; 20=forced lin intern tides (load_sol>0);
			!% combine 1&2: 3=SHT split topo
N_data=woa09_1deg_pole_15_-40	! file for statification data
!N_data=0			! 0 for no data...
N_hor_var=0		!% 0-horizontally uniform N; 1-horizontally varying as given in N_data
N_form = 1		!% 1 for uniform, 2 for Ns/(1-z/NL)
Ns = .01		!% optional surface stratification
Nl = 500		!% optional stratification lengthscale
!************** topo smoothing *************************
! IMPORTANT: given value of sht_smooth_H is used only with itd_scheme=1.
! When itd_scheme>1, smoothing degree is calculated using igw_gppw parameter
!*******************************************************
smooth_type=1		!% 0 - none; 1 - truncation smoothing; 2 - Gaussian spectral smoothing
sht_smooth_H=1440	!% truncation order for the spherical harmonic representation of H (0 for none)
			!% smallest resolved length scale is 2*pi*re/(2*sht_smooth_H), 
			!% hence, sht_smooth_H=720 gives resolution of ~30km at the equator
!************** itd_scheme=1 (and 3), parameterization *************************
itd_coeff=1.33		!% a multiplying coeff in the ITD parametrization (1/3 for woa05; 1.33 for woa09 @bttm)
trapped = 1		!% 0=all lats; 1=below crit lat
!************** itd_scheme=2 (and 3), linear global IT scheme *******************
n_modes=1		! # of IT modes solved for (cannot be large than # of N data points)
eig_order=2		! discretization order for the eigenvalue problem
n_cheb=20		! # of Chebyshev nodes used for approximating cn(H)
igw_gppw=4		! Sponge Layer: min number of Grid Points Per Wavelength for IGWs
cn_scheme=2		! Sponge Layer: cn is calculated with: 1 -- WKB; 2 -- actual cn(H)
it_damp=1e-4		! Sponge Layer: internal tide damping rate
sponge_forcing=0	! Sponge Layer: 1 -- ITs should be forced in the sponge; 0 -- otherwise
!************** itd_scheme=3, mixed global IT scheme *******************
eps_rough=0		! The criticality cut-off. Regions with |grad(H)|/tan(alpha)>eps_rough are too rough
			! for IT gen there to be adequately resolved with itd_scheme=2. And itd_scheme=1 is applied there
!********************************************************************
!  SAL scheme:
!********************************************************************
sal_scheme=3	!% 0=none, 1=scalar approx, >=2 iteration
		! % 2:real(beta0), 3: betamin < real(beta) < betamax
beta0=0.085	! initial value for beta
betamin=0	! % minimum value for beta (iteration)
betamax=0.3 	! % maximum value for beta (iteration)
ntrunc=720	! % maximum truncation order for the spherical harmonics
		! ntrunc must be <= nlat-1, otherwise ntrunc:=nlat-1
		! the series contains (ntrunc+1)*(ntrunc+2)/2 harmonics
save_sht=1	! 0 - keep the SHT work arrays and Love numbers in memory between the iterations
		! 1 - save them to disk (saves RAM if ntrunc is large (array size ~ntrunc^3))
sal_avg=5	! average over this many degrees
!********************************************************************
! BAROTROPIC nonlinear solver iterative scheme
!********************************************************************
itn_max=25		! the max alowed number of iterations
cvg_scheme=1		!% 1 for complex dh, 2 for abs(dh)
cvg_dhbar=0.01		!% domain averaged requirement on the residual
cvg_dhmax=0.05		!% pointwise requirement on the residual
p_fric = 1		! 1 for friction; 2 for over-relaxation
p_avg = 0.5		! for averaging between iterations; 1 for no averaging
!********************************************************************
! LIBRARIES AND THREADING
!********************************************************************
lib='m'			! 'm' for MKL lib functions; 's' for SparseKit and ad-hoc functions
!omp_num_threads=8	! # of processors with shared memory, default = OMP_GET_MAX_THREADS
!mpi_num_nodes=0	! # of nodes for the distributed-memory parallel solver, default = 0
blas_num_threads=0	! if <0 then do not use MKL BLAS; 0 - auto; else # of threads for MKL BLAS
!********************************************************************
! MATRIX SOLVER
!********************************************************************
solver=pardiso		! umfpack, pardiso, gmres
!******** Iterative algorithms (with preconditioning)    ****************************************
gmres_prec=ilut		! Select the preconditioning method for GMRES: ilut (not implemented: ilu0)
gmres_rest_it=3		! the number of the non-restarted FGMRES iterations.
gmres_tol=9		! specifies residual tolerance: 10^{-gmres_rel_tol} (default is 1.0D-6)
!*************** MKL, FGMRES witn incomplete parallel LU factorization ****************

!*************** MKL, PARDISO ****************************************
!******** Direct, with parallel LU factorization and Out-of-Core mode ********
pardiso_symbolic=0	! 0 - incurres symbolic factorization on every iteration
			! 1 - symbolic factorization on the 1st iteration only (the result is kept in RAM)

pardiso_ooc=1		! 0 for IC (in-core) version (faster); 2 for forced OOC (out-of-core) version (slow)
			! 1 - use IC version if available RAM suffices, otherwise use OOC version
pardiso_max_ram=22528	! the total RAM (Mb) that can be used for
			! storing the matrix factors (should be less than available RAM)
pardiso_max_swap=0	! same for swap memory (Mb)
			! 15360-15Gb, 18432-18Gb, 20480-20Gb, 22528-22Gb
pardiso_keep_files=0	! 0 -- files saved in OCC will be removed
!**** Direct-Iterative CGS (Conjugate-Gradients Squared) with LU factorization on a first few steps ******
pardiso_iterative=0	! 0 for direct solver; 1 incurres LU-preconditioned CGS iterations
pardiso_iter_tol=6	! CGS iterations with astopping tolerance of 10^{-pardiso_iter_tol}
!********************************************************************
! Physical Parameters:
!********************************************************************
! In this configuration the North pole is centered on Greenland (30â—¦W, 80â—¦N)
! and the South pole on Antarctica (30â—¦W, 80â—¦S)
! The other option of (40â—¦W, 75â—¦N) seems to touch water within finer grid
latP=15		!10!15 ! Pole of the rotated spherical coordinates
lonP=-40	!-30!-40

re=6.371e6		! average earth's radius, m
omega=7.292d-5	!7.292115e-5	! angular velocity, rad/s
g=9.80		!9.80665	! surface gravity, m/s^2
rhoe=5515		! average density of planet, kg/m^2
rhoo=1030		! average density of seawater, kg/m^3

